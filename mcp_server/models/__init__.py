# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T08:58:55+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class BundleDataProp(BaseModel):
    key: Optional[str] = Field(None, description='Bundle data key')
    value: Optional[str] = Field(None, description='Bundle data value')


class Status(BaseModel):
    finished: Optional[bool] = None
    itemCount: Optional[int] = None


class InstallStatus(BaseModel):
    status: Optional[Status] = None


class KeystoreChainItems(BaseModel):
    issuer: Optional[str] = Field(None, description='e.g. "CN=Admin"')
    notAfter: Optional[str] = Field(
        None, description='e.g. "Sun Jun 30 23:59:50 AEST 2019"'
    )
    notBefore: Optional[str] = Field(
        None, description='e.g. "Sun Jul 01 12:00:00 AEST 2018"'
    )
    serialNumber: Optional[int] = Field(None, description='18165099476682912368')
    subject: Optional[str] = Field(None, description='e.g. "CN=localhost"')


class KeystoreItems(BaseModel):
    algorithm: Optional[str] = Field(None, description='e.g. "RSA"')
    alias: Optional[str] = Field(None, description='Keystore alias name')
    chain: Optional[List[KeystoreChainItems]] = None
    entryType: Optional[str] = Field(None, description='e.g. "privateKey"')
    format: Optional[str] = Field(None, description='e.g. "PKCS#8"')


class SamlConfigurationPropertyItemsArray(BaseModel):
    description: Optional[str] = Field(None, description='Property description')
    is_set: Optional[bool] = Field(None, description='True if property is set')
    name: Optional[str] = Field(None, description='property name')
    optional: Optional[bool] = Field(None, description='True if optional')
    type: Optional[int] = Field(
        None, description='Property type, 1=String, 3=long, 11=boolean, 12=Password'
    )
    values: Optional[List[str]] = Field(None, description='Property value')


class SamlConfigurationPropertyItemsBoolean(BaseModel):
    description: Optional[str] = Field(None, description='Property description')
    is_set: Optional[bool] = Field(None, description='True if property is set')
    name: Optional[str] = Field(None, description='property name')
    optional: Optional[bool] = Field(None, description='True if optional')
    type: Optional[int] = Field(
        None, description='Property type, 1=String, 3=long, 11=boolean, 12=Password'
    )
    value: Optional[bool] = Field(None, description='Property value')


class SamlConfigurationPropertyItemsLong(BaseModel):
    description: Optional[str] = Field(None, description='Property description')
    is_set: Optional[bool] = Field(None, description='True if property is set')
    name: Optional[str] = Field(None, description='property name')
    optional: Optional[bool] = Field(None, description='True if optional')
    type: Optional[int] = Field(
        None, description='Property type, 1=String, 3=long, 11=boolean, 12=Password'
    )
    value: Optional[int] = Field(None, description='Property value')


class SamlConfigurationPropertyItemsString(BaseModel):
    description: Optional[str] = Field(None, description='Property description')
    is_set: Optional[bool] = Field(None, description='True if property is set')
    name: Optional[str] = Field(None, description='property name')
    optional: Optional[bool] = Field(None, description='True if optional')
    type: Optional[int] = Field(
        None, description='Property type, 1=String, 3=long, 11=boolean, 12=Password'
    )
    value: Optional[str] = Field(None, description='Property value')


class TruststoreItems(BaseModel):
    alias: Optional[str] = Field(None, description='Truststore alias name')
    entryType: Optional[str] = None
    issuer: Optional[str] = Field(None, description='e.g. "CN=Admin"')
    notAfter: Optional[str] = Field(
        None, description='e.g. "Sun Jun 30 23:59:50 AEST 2019"'
    )
    notBefore: Optional[str] = Field(
        None, description='e.g. "Sun Jul 01 12:00:00 AEST 2018"'
    )
    serialNumber: Optional[int] = Field(None, description='18165099476682912368')
    subject: Optional[str] = Field(None, description='e.g. "CN=localhost"')


class DefaultGroups(RootModel[List[str]]):
    root: List[str]


class Path(RootModel[List[str]]):
    root: List[str]


class SynchronizeAttributes(RootModel[List[str]]):
    root: List[str]


class PwdresetAuthorizables(RootModel[List[str]]):
    root: List[str]


class BundlesIgnored(RootModel[List[str]]):
    root: List[str]


class ProxyExceptions(RootModel[List[str]]):
    root: List[str]


class JcrContentProtocolHTTPHeaders(RootModel[List[str]]):
    root: List[str]


class EtcTruststorePostRequest(BaseModel):
    truststore_p12: Optional[bytes] = Field(None, alias='truststore.p12')


class LibsGraniteSecurityPostTruststorePostRequest(BaseModel):
    certificate: Optional[bytes] = None


class Propertylist(RootModel[List[str]]):
    root: List[str]


class FieldPathNamePostRequest(BaseModel):
    file: Optional[bytes] = None


class BundleData(BaseModel):
    category: Optional[str] = Field(None, description='Bundle category')
    fragment: Optional[bool] = Field(None, description='Is bundle a fragment')
    id: Optional[int] = Field(None, description='Bundle ID')
    name: Optional[str] = Field(None, description='Bundle name')
    props: Optional[List[BundleDataProp]] = None
    state: Optional[str] = Field(None, description='Bundle state value')
    stateRaw: Optional[int] = Field(None, description='Numeric raw bundle state value')
    symbolicName: Optional[str] = Field(None, description='Bundle symbolic name')
    version: Optional[str] = Field(None, description='Bundle version')


class BundleInfo(BaseModel):
    data: Optional[List[BundleData]] = None
    s: Optional[List[int]] = None
    status: Optional[str] = Field(None, description='Status description of all bundles')


class KeystoreInfo(BaseModel):
    aliases: Optional[List[KeystoreItems]] = None
    exists: Optional[bool] = Field(None, description="False if truststore don't exist")


class SamlConfigurationProperties(BaseModel):
    addGroupMemberships: Optional[SamlConfigurationPropertyItemsBoolean] = Field(
        None,
        description='Whether or not a user should be automatically added to CRX groups after successful authentication.',
    )
    assertionConsumerServiceURL: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description='The (optional) AssertionConsumerServiceURL attribute of an Authn request specifies the location to which a  message MUST be sent to the requester.',
    )
    clockTolerance: Optional[SamlConfigurationPropertyItemsLong] = Field(
        None,
        description='Time tolerance in seconds to compensate clock skew between IDP and SP when validating Assertions.',
    )
    createUser: Optional[SamlConfigurationPropertyItemsBoolean] = Field(
        None,
        description='Whether or not to autocreate nonexisting users in the repository.',
    )
    defaultGroups: Optional[SamlConfigurationPropertyItemsArray] = Field(
        None,
        description='A list of default CRX groups users are added to after successful authentication.',
    )
    defaultRedirectUrl: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description='The default location to redirect to after successful authentication.',
    )
    digestMethod: Optional[SamlConfigurationPropertyItemsString] = Field(
        None, description='The digest algorithm to use when signing a SAML message.'
    )
    groupMembershipAttribute: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description='The name of the attribute containing a list of CRX groups this user should be added to.',
    )
    handleLogout: Optional[SamlConfigurationPropertyItemsBoolean] = Field(
        None,
        description='Whether or not logout (dropCredentials) requests will be processed by this handler.',
    )
    idpCertAlias: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description="The alias of the IdP's certificate in the global truststore. If this property is empty the authentication handler is disabled.",
    )
    idpHttpRedirect: Optional[SamlConfigurationPropertyItemsBoolean] = Field(
        None,
        description='Use an HTTP Redirect to the IDP URL instead of sending an AuthnRequest-message to request credentials. Use this for IDP initiated authentication.',
    )
    idpUrl: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description='URL of the IDP where the SAML Authentication Request should be sent to. If this property is empty the authentication handler is disabled. (idpUrl)',
    )
    keyStorePassword: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description="The password of the key-store of the 'authentication-service' system user.",
    )
    logoutUrl: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description="URL of the IDP where the SAML Logout Request should be sent to. If this property is empty the authentication handler won't handle logouts.",
    )
    nameIdFormat: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description='The value of the NameIDPolicy format parameter to send in the AuthnRequest message.',
    )
    path: Optional[SamlConfigurationPropertyItemsArray] = Field(
        None,
        description='Repository path for which this authentication handler should be used by Sling. If this is empty, the authentication handler will be disabled.',
    )
    service_ranking: Optional[SamlConfigurationPropertyItemsLong] = Field(
        None,
        alias='service.ranking',
        description='OSGi Framework Service Ranking value to indicate the order in which to call this service. This is an int value where higher values designate higher precedence. Default value is 0.',
    )
    serviceProviderEntityId: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description='ID which uniquely identifies this service provider with the identity provider. If this property is empty the authentication handler is disabled.',
    )
    signatureMethod: Optional[SamlConfigurationPropertyItemsString] = Field(
        None, description='The signature algorithm to use when signing a SAML message.'
    )
    spPrivateKeyAlias: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description="The alias of the SP's private key in the key-store of the 'authentication-service' system user. If this property is empty the handler will not be able to sign or decrypt messages.",
    )
    synchronizeAttributes: Optional[SamlConfigurationPropertyItemsArray] = Field(
        None,
        description='A list of attribute mappings (in the format \\attributename=path/relative/to/user/node\\) which should be stored in the repository on user-synchronization.',
    )
    useEncryption: Optional[SamlConfigurationPropertyItemsBoolean] = Field(
        None,
        description="Whether or not this authentication handler expects encrypted SAML assertions. If this is enabled the SP's private key must be provided in the key-store of the 'authentication-service' system user (see SP Private Key Alias above).",
    )
    userIDAttribute: Optional[SamlConfigurationPropertyItemsString] = Field(
        None,
        description='The name of the attribute containing the user ID used to authenticate and create the user in the CRX repository. Leave empty to use the Subject:NameId.',
    )
    userIntermediatePath: Optional[SamlConfigurationPropertyItemsString] = Field(
        None, description='User intermediate path to store created users.'
    )


class TruststoreInfo(BaseModel):
    aliases: Optional[List[TruststoreItems]] = None
    exists: Optional[bool] = Field(None, description="False if truststore don't exist")


class SamlConfigurationInfo(BaseModel):
    bundle_location: Optional[str] = Field(
        None, description='needed for configuration binding'
    )
    description: Optional[str] = Field(None, description='Title')
    pid: Optional[str] = Field(None, description='Persistent Identity (PID)')
    properties: Optional[SamlConfigurationProperties] = None
    service_location: Optional[str] = Field(
        None, description='needed for configuraiton binding'
    )
    title: Optional[str] = Field(None, description='Title')
